import time
import json
import asyncio
import logging
import re
from config import (
    TRADE_PAIRS,
    ADMIN_CHAT_ID,
    TELEGRAM_API_TOKEN,
    AUTO_UPDATE_PAIRS,
    UPDATE_INTERVAL,
    MIN_VOLUME_USDT,
    MAX_VOLATILITY,
)
from telegram import Bot
from bybit_client import BybitAPI
from indicators import IndicatorCalculator
from pair_manager import PairManager

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
auto_trade_active = False

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
bybit_client = BybitAPI()
indicator_calc = IndicatorCalculator()
bot = Bot(TELEGRAM_API_TOKEN)

# ‚úÖ –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
active_orders = {pair: None for pair in TRADE_PAIRS}

pair_manager = PairManager()
first_signal_check = True


def extract_balance_from_text(balance_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ USDT –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞"""
    match = re.search(r"üí≥ \*–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\* ([\d,]+\.?\d*) USDT", balance_text)
    if match:
        return float(match.group(1).replace(",", ""))
    return 0  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç


async def start_auto_trade():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ 0 –±–∞–ª–∞–Ω—Å–µ)"""
    global auto_trade_active
    if auto_trade_active:
        return "‚ö†Ô∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!"

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    balance = bybit_client.get_wallet_balance()

    try:
        balance = float(balance)  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    except (TypeError, ValueError):
        balance = 0  # ‚ùó –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å 0

    if balance <= 0:
        await bot.send_message(
            ADMIN_CHAT_ID,
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏! –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.",
        )
        logging.warning("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –ù–ï –∑–∞–ø—É—â–µ–Ω–∞!")
        return  # ‚ùå –ù–ï –≤–∫–ª—é—á–∞–µ–º `auto_trade_active`

    auto_trade_active = True
    logging.info("‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
    await bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")

    while auto_trade_active:
        try:
            await trade_logic()
            await asyncio.sleep(30)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
            await bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")

    logging.info("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    await bot.send_message(ADMIN_CHAT_ID, "‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


def stop_auto_trade():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"""
    global auto_trade_active
    auto_trade_active = False
    logging.info("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    return "‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"


async def trade_logic():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    global active_orders, first_signal_check
    trading_pairs = pair_manager.get_active_pairs()
    signals = indicator_calc.calculate_signals(trading_pairs)

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    balance_text = bybit_client.get_wallet_balance()
    balance = extract_balance_from_text(balance_text)

    if balance == 0:
        await bot.send_message(ADMIN_CHAT_ID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
        logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
        return  # ‚ùå –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ—Ç

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç
    send_report = first_signal_check  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    report = "üì° *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤*\n"

    for pair, (signal, strength) in signals.items():
        report += f"üìä {pair}: {signal} (–°–∏–ª–∞: {strength})\n"

    if send_report:
        await bot.send_message(ADMIN_CHAT_ID, report, parse_mode="Markdown")
        first_signal_check = False  # ‚ùó –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

    for pair, (signal, strength) in signals.items():
        if strength < 1:
            continue

        if active_orders.get(pair):
            logging.info(f"‚ö†Ô∏è {pair}: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        order_size = calculate_order_size(balance, strength)
        if order_size == 0:
            logging.warning(f"‚ö†Ô∏è {pair}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–¥–µ–ª–∫–∏")
            continue

        side = "Buy" if signal == "BUY" else "Sell"
        response = await bybit_client.create_order(pair, side, order_size)

        if response:
            logging.info(f"‚úÖ {pair}: –û—Ä–¥–µ—Ä {side} –Ω–∞ {order_size} USDT —Ä–∞–∑–º–µ—â–µ–Ω!")
            active_orders[pair] = response.get("orderId")

            # ‚úÖ –ü–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º `üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤` –µ—â—ë —Ä–∞–∑
            await bot.send_message(ADMIN_CHAT_ID, report, parse_mode="Markdown")

            await bot.send_message(
                ADMIN_CHAT_ID,
                f"‚úÖ *{pair}*: –û—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä `{side}` –Ω–∞ *{order_size}* USDT",
                parse_mode="Markdown",
            )
        else:
            logging.error(f"‚ùå {pair}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")


def calculate_order_size(balance, strength):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞"""
    percent = 0.01 * strength  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - 1%, —Å–∏–ª—å–Ω—ã–π - 2%, –º–∞–∫—Å–∏–º—É–º - 5%
    order_size = balance * min(percent, 0.05)  # üî• –ù–µ –±–æ–ª—å—à–µ 5% –±–∞–ª–∞–Ω—Å–∞
    return round(order_size, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤


async def update_trade_pairs():
    """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¢–û–ü-15 –ø–æ –æ–±—ä–µ–º—É, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã, –∫—Ä–æ–º–µ USDT)"""
    print("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
    all_pairs = bybit_client.get_spot_pairs()

    if not all_pairs:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä!")
        return

    stablecoins = {"USDC", "BUSD", "DAI", "TUSD", "FDUSD", "EURS"}
    pair_volumes = []

    for pair in all_pairs:
        symbol = pair["symbol"]
        volume = float(pair.get("turnover24h", 0))  # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á

        # ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT –∏ –±–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
        if "USDT" in symbol and not any(stable in symbol for stable in stablecoins):
            pair_volumes.append((symbol, volume))

    # ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É –∏ –±–µ—Ä–µ–º –¢–û–ü-15
    pair_volumes.sort(key=lambda x: x[1], reverse=True)
    top_pairs = [pair[0] for pair in pair_volumes[:15]]

    global TRADE_PAIRS
    TRADE_PAIRS = top_pairs

    with open("config.json", "w") as file:
        json.dump({"TRADE_PAIRS": top_pairs}, file, indent=4)

    msg = (
        f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(top_pairs)} –ø–∞—Ä!\nüìä –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {', '.join(top_pairs)}"
    )
    print(msg)
    await bot.send_message(ADMIN_CHAT_ID, msg)


def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop"""
    loop = asyncio.get_event_loop()
    loop.create_task(update_trade_pairs())


if AUTO_UPDATE_PAIRS:
    start_background_tasks()
