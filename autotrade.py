import asyncio
from config import TRADE_PAIRS
from indicators import IndicatorCalculator
from bybit_client import BybitAPI
import numpy as np

indicator_calc = IndicatorCalculator()
bybit_client = BybitAPI()

auto_trade_active = False
auto_trade_task = None  # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞


def calculate_trade_size(balance, signal_strength, atr):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –∏ ATR"""
    risk_percent = {1: 2, 2: 5, 3: 10}  # % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
    atr_multiplier = np.clip(
        atr / 10, 0.5, 2
    )  # –£—Å–∏–ª–µ–Ω–∏–µ –æ—Ç ATR (–µ—Å–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è)

    percent = risk_percent.get(signal_strength, 0) * atr_multiplier
    trade_size = (balance * percent) / 100

    return round(trade_size, 4)


def calculate_sl_tp(last_price, signal, strength, atr):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (SL) –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (TP)"""
    atr_factor = {1: 0.5, 2: 1, 3: 1.5}  # SL/TP –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç ATR
    factor = atr_factor.get(strength, 0.5) * atr

    sl = last_price - factor if signal == "BUY" else last_price + factor
    tp = last_price + (factor * 2) if signal == "BUY" else last_price - (factor * 2)

    return round(sl, 2), round(tp, 2)


async def auto_trade():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global auto_trade_active
    while auto_trade_active:
        balance = bybit_client.get_wallet_balance()
        if not balance:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!")
            await asyncio.sleep(60)
            continue

        balance_value = float(
            balance.split("*–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* ")[1].split(" ")[0].replace(",", "")
        )

        for pair in TRADE_PAIRS:
            df = indicator_calc.get_historical_data(pair)
            if df is None:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö {pair}")
                continue

            signal, strength = indicator_calc.calculate_signal_strength(df)
            if strength == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            valid_signal, reason = indicator_calc.filter_fake_signals(df)
            if not valid_signal:
                print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({reason})")
                continue

            atr = indicator_calc.calculate_atr(df)  # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç ATR
            trade_size = calculate_trade_size(balance_value, strength, atr)
            last_price = df.iloc[-1]["close"]
            sl, tp = calculate_sl_tp(last_price, signal, strength, atr)

            print(
                f"üìä {pair}: {signal} (–°–∏–ª–∞: {strength}) | –û–±—ä–µ–º: {trade_size} | SL: {sl} | TP: {tp}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            side = "Buy" if signal == "üü¢ –ü–æ–∫—É–ø–∫–∞" else "Sell"
            order = bybit_client.create_order(
                pair, side, trade_size, price=None, order_type="Market"
            )
            print(f"‚úÖ –û—Ä–¥–µ—Ä: {order}")

        await asyncio.sleep(60)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞


def start_auto_trade():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"""
    global auto_trade_active, auto_trade_task
    if auto_trade_active:
        return "‚öôÔ∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!"
    auto_trade_active = True
    auto_trade_task = asyncio.create_task(auto_trade())
    return "‚öôÔ∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!"


def stop_auto_trade():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"""
    global auto_trade_active, auto_trade_task
    if not auto_trade_active:
        return "‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
    auto_trade_active = False
    if auto_trade_task:
        auto_trade_task.cancel()
    return "‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
