import time
import json
import asyncio
import logging
import re
from config import (
    TRADE_PAIRS,
    ADMIN_CHAT_ID,
    TELEGRAM_API_TOKEN,
    AUTO_UPDATE_PAIRS,
    TRADE_INTERVAL,
    TRAILING_STOP_PERCENT,
    TRAILING_TAKE_PROFIT_PERCENT,
    MIN_ORDER_USDT,
)
from telegram import Bot
from bybit_client import BybitAPI
from indicators import IndicatorCalculator
from pair_manager import PairManager

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
auto_trade_active = False

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
bybit_client = BybitAPI()
indicator_calc = IndicatorCalculator()
bot = Bot(TELEGRAM_API_TOKEN)

# ‚úÖ –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
active_orders = {}

pair_manager = PairManager()
first_signal_check = True
active_orders = {}  # –ö–ª—é—á: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞

# –ü–æ—Ä–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è trailing (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
TRAILING_CHECK_INTERVAL = 10


async def monitor_position(pair, order_info):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø‚Äë–ª–æ—Å—Å –∏ —Ç–µ–π–∫‚Äë–ø—Ä–æ—Ñ–∏—Ç–æ–º.
    """

    entry_price = order_info["entry_price"]
    side = order_info["side"]
    order_size = order_info["order_size"]
    max_price = entry_price  # –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ BUY
    # –î–ª—è —Ä–µ–∏–Ω—Ç—Ä–∏ –≤—Ö–æ–¥–∞ –∑–∞–¥–∞–¥–∏–º cooldown –∏ –ø–æ—Ä–æ–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    REENTRY_TRIGGER_PERCENT = 0.03  # –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞ 3% –æ—Ç entry_price
    REENTRY_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç
    last_reentry_time = 0

    while pair in active_orders:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏:
        kline = bybit_client.get_kline(pair, interval=TRADE_INTERVAL, limit=1)
        if kline and "result" in kline and kline["result"]["list"]:
            current_price = float(kline["result"]["list"][-1][4])
        else:
            await asyncio.sleep(5)
            continue

        if side == "Buy":
            if current_price > max_price:
                max_price = current_price
            trailing_stop = max_price * (1 - TRAILING_STOP_PERCENT)
            take_profit = entry_price * (1 + TRAILING_TAKE_PROFIT_PERCENT)
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –Ω–∏–∂–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Ç–µ–π–∫‚Äë–ø—Ä–æ—Ñ–∏—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
            if current_price <= trailing_stop or current_price >= take_profit:
                close_response = await asyncio.to_thread(
                    bybit_client.close_position, pair, side, order_size
                )
                await bot.send_message(
                    ADMIN_CHAT_ID,
                    f"üìâ *{pair}*: –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É —É—Å–ª–æ–≤–∏—é.\n"
                    f"–¶–µ–Ω–∞: {current_price:.2f} | Trailing Stop: {trailing_stop:.2f} | Take Profit: {take_profit:.2f}",
                    parse_mode="Markdown",
                )
                active_orders.pop(pair, None)
                break

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (—Ä–µ–∏–Ω—Ç—Ä–∏) –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ
            if current_price >= entry_price * (1 + REENTRY_TRIGGER_PERCENT):
                now = time.time()
                if now - last_reentry_time > REENTRY_COOLDOWN:
                    additional_order_size = calculate_order_size(
                        entry_price, 3
                    )  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞
                    response = await asyncio.to_thread(
                        bybit_client.create_order, pair, side, additional_order_size
                    )
                    if response:
                        last_reentry_time = now
                        order_info["order_size"] += additional_order_size
                        await bot.send_message(
                            ADMIN_CHAT_ID,
                            f"‚úÖ *{pair}*: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ä–æ—Å—Ç–µ.\n"
                            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä—ë–º: {additional_order_size} USDT",
                            parse_mode="Markdown",
                        )
            elif side == "Sell":
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º min_price –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ
                if "min_price" not in order_info:
                    order_info["min_price"] = entry_price
                if current_price < order_info["min_price"]:
                    order_info["min_price"] = current_price
                trailing_stop = order_info["min_price"] * (1 + TRAILING_STOP_PERCENT)
                take_profit = entry_price * (1 - TRAILING_TAKE_PROFIT_PERCENT)
                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Ç–∏ –æ—Ç –º–∏–Ω–∏–º—É–º–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                if current_price >= trailing_stop or current_price <= take_profit:
                    await asyncio.to_thread(bybit_client.close_position, pair, side, order_size)
                    await bot.send_message(
                        ADMIN_CHAT_ID,
                        f"üìâ *{pair}*: –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.\n–¶–µ–Ω–∞: {current_price:.2f} | Trailing Stop: {trailing_stop:.2f} | Take Profit: {take_profit:.2f}",
                        parse_mode="Markdown",
                    )
                    active_orders.pop(pair, None)
                    break
                # –†–µ–∏–Ω—Ç—Ä–∏ –¥–ª—è SELL ‚Äì –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
                REENTRY_TRIGGER_PERCENT = 0.03  # 3% —Å–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç entry_price
                REENTRY_COOLDOWN = 300  # 5 –º–∏–Ω—É—Ç
                now = time.time()
                if current_price <= entry_price * (1 - REENTRY_TRIGGER_PERCENT):
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                    if "last_reentry_time" not in order_info or now - order_info["last_reentry_time"] > REENTRY_COOLDOWN:
                        additional_order_size = calculate_order_size(entry_price, 3)
                        response = await asyncio.to_thread(bybit_client.create_order, pair, side, additional_order_size)
                        if response:
                            order_info["order_size"] += additional_order_size
                            order_info["last_reentry_time"] = now
                            await bot.send_message(
                                ADMIN_CHAT_ID,
                                f"‚úÖ *{pair}*: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ (SELL) –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Å–Ω–∏–∂–µ–Ω–∏–∏.\n–î–æ–ø. –æ–±—ä—ë–º: {additional_order_size} USDT",
                                parse_mode="Markdown",
                            )

        await asyncio.sleep(5)


def extract_balance_from_text(balance_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ USDT –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞"""
    match = re.search(r"üí≥ \*–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:\* ([\d,]+\.?\d*) USDT", balance_text)
    if match:
        return float(match.group(1).replace(",", ""))
    return 0  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ—Ç


async def start_auto_trade():
    global auto_trade_active
    if auto_trade_active:
        return "‚ö†Ô∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!"

    balance = bybit_client.get_wallet_balance(as_report=False)
    try:
        balance = float(balance)
    except (TypeError, ValueError):
        balance = 0

    if balance <= 0:
        await bot.send_message(
            ADMIN_CHAT_ID,
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏! –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.",
        )
        logging.warning("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –ù–ï –∑–∞–ø—É—â–µ–Ω–∞!")
        return

    auto_trade_active = True
    logging.info("‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
    await bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
    cycle_count = 0
    while auto_trade_active:
        try:
            orders_placed = await trade_logic()
            cycle_count += 1
            if orders_placed:
                for pair in orders_placed:
                    await bot.send_message(
                        ADMIN_CHAT_ID,
                        f"‚úÖ *{pair}*: –°–¥–µ–ª–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞.",
                        parse_mode="Markdown",
                    )
            elif cycle_count % 60 == 0:
                await bot.send_message(
                    ADMIN_CHAT_ID,
                    "üîÑ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞ ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.",
                )
                cycle_count = 0
            await asyncio.sleep(30)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
            await bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")

    logging.info("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


def stop_auto_trade():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    global auto_trade_active, active_orders
    auto_trade_active = False
    active_orders.clear()
    logging.info("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    return "‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"


async def trade_logic():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.
    """
    global active_orders, first_signal_check
    trading_pairs = pair_manager.get_active_pairs()
    signals = indicator_calc.calculate_signals(trading_pairs)
    orders_placed = []

    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –±–∞–ª–∞–Ω—Å Unified Trading (USDT)
    balance = bybit_client.get_wallet_balance(as_report=False)
    if balance == 0:
        await bot.send_message(ADMIN_CHAT_ID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
        logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
        return orders_placed

    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
    if first_signal_check:
        report = "üì° *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤*\n"
        for pair, (signal, strength) in signals.items():
            report += f"üìä {pair}: {signal} (–°–∏–ª–∞: {strength})\n"
        await bot.send_message(ADMIN_CHAT_ID, report, parse_mode="Markdown")
        first_signal_check = False

    for pair, (signal, strength) in signals.items():
        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —è–≤–Ω–æ BUY –∏–ª–∏ SELL
        if signal not in ("BUY", "SELL"):
            continue

        # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä ‚â•2
        if strength < 2:
            continue

        if pair in active_orders:
            # logging.info(f"‚ö†Ô∏è {pair}: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª SELL, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        if signal == "SELL":
            asset = pair.replace("USDT", "")
            asset_balance = bybit_client.get_asset_balance(asset)
            if asset_balance <= 0:
                # logging.info(
                #     f"‚ö†Ô∏è {pair}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–¥–µ—Ä."
                # )
                continue

        order_size = calculate_order_size(balance, strength)
        if order_size == 0:
            logging.warning(f"‚ö†Ô∏è {pair}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–¥–µ–ª–∫–∏ (—Ä–∞—Å—á—ë—Ç–Ω—ã–π –æ–±—ä—ë–º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {MIN_ORDER_USDT} USDT)")
            continue

        side = "Buy" if signal == "BUY" else "Sell"
        # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ asyncio.to_thread
        response = await asyncio.to_thread(
            bybit_client.create_order, pair, side, order_size
        )
        if response:
            kline = bybit_client.get_kline(pair, interval=TRADE_INTERVAL, limit=1)
            entry_price = float(kline["result"]["list"][-1][4]) if kline else 0

            active_orders[pair] = {
                "order_id": response.get("orderId"),
                "side": side,
                "entry_price": entry_price,
                "order_size": order_size,
            }
            orders_placed.append(pair)
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"‚úÖ *{pair}*: –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è `{side}` –Ω–∞ {order_size} USDT –ø–æ —Ü–µ–Ω–µ {entry_price:.2f}",
                parse_mode="Markdown",
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            asyncio.create_task(monitor_position(pair, active_orders[pair]))
        else:
            logging.error(f"‚ùå {pair}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")
    return orders_placed


def calculate_order_size(balance, strength):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä—ë–º –æ—Ä–¥–µ—Ä–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —É—Ä–æ–≤–Ω—è.

    –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä—ë–º –º–µ–Ω—å—à–µ MIN_ORDER_USDT –∏ –±–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MIN_ORDER_USDT.
    –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ MIN_ORDER_USDT, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.
    """
    percent = 0.01 * strength  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª ‚Äì 1%, —Å–∏–ª—å–Ω—ã–π ‚Äì 2%, –º–∞–∫—Å–∏–º—É–º ‚Äì 5%
    order_size = balance * min(percent, 0.05)
    order_size = round(order_size, 2)
    if order_size < MIN_ORDER_USDT:
        if balance >= MIN_ORDER_USDT:
            order_size = MIN_ORDER_USDT
        else:
            order_size = 0
    return order_size


async def update_trade_pairs():
    """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¢–û–ü-15 –ø–æ –æ–±—ä–µ–º—É, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã, –∫—Ä–æ–º–µ USDT)"""
    print("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
    all_pairs = bybit_client.get_spot_pairs()

    if not all_pairs:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä!")
        return

    stablecoins = {"USDC", "BUSD", "DAI", "TUSD", "FDUSD", "EURS"}
    pair_volumes = []

    for pair in all_pairs:
        symbol = pair["symbol"]
        volume = float(pair.get("turnover24h", 0))  # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á

        # ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT –∏ –±–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
        if "USDT" in symbol and not any(stable in symbol for stable in stablecoins):
            pair_volumes.append((symbol, volume))

    # ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É –∏ –±–µ—Ä–µ–º –¢–û–ü-15
    pair_volumes.sort(key=lambda x: x[1], reverse=True)
    top_pairs = [pair[0] for pair in pair_volumes[:15]]

    global TRADE_PAIRS
    TRADE_PAIRS = top_pairs

    with open("config.json", "w") as file:
        json.dump({"TRADE_PAIRS": top_pairs}, file, indent=4)

    msg = (
        f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(top_pairs)} –ø–∞—Ä!\nüìä –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {', '.join(top_pairs)}"
    )
    print(msg)
    await bot.send_message(ADMIN_CHAT_ID, msg)


def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop"""
    loop = asyncio.get_event_loop()
    loop.create_task(update_trade_pairs())


if AUTO_UPDATE_PAIRS:
    start_background_tasks()
