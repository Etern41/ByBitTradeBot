import asyncio
import logging
from config import TRADE_PAIRS, ADMIN_CHAT_ID, TELEGRAM_API_TOKEN
from bybit_client import BybitAPI
from indicators import IndicatorCalculator
from telegram import Bot

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
auto_trade_active = False

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
bybit_client = BybitAPI()
indicator_calc = IndicatorCalculator()
bot = Bot(TELEGRAM_API_TOKEN)

# ‚úÖ –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
active_orders = {pair: None for pair in TRADE_PAIRS}


async def start_auto_trade():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏"""
    global auto_trade_active
    if auto_trade_active:
        return "‚ö†Ô∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!"

    auto_trade_active = True
    logging.info("‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")

    while auto_trade_active:
        try:
            await trade_logic()  # ‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            await asyncio.sleep(30)  # üîÑ –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
            await bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")

    logging.info("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


def stop_auto_trade():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"""
    global auto_trade_active
    auto_trade_active = False
    logging.info("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    return "‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"


async def trade_logic():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    global active_orders

    # ‚úÖ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞
    if not auto_trade_active:
        return

    signals = indicator_calc.calculate_signals()

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    report = "üì° *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤*\n"
    for pair, (signal, strength) in signals.items():
        report += f"üìä {pair}: {signal} (–°–∏–ª–∞: {strength})\n"

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ Telegram (—Ä–∞–∑ –≤ —Ü–∏–∫–ª)
    if auto_trade_active:
        await bot.send_message(ADMIN_CHAT_ID, report, parse_mode="Markdown")

    for pair, (signal, strength) in signals.items():
        # ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if strength < 1:
            continue

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä
        if active_orders.get(pair):
            logging.info(f"‚ö†Ô∏è {pair}: –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = bybit_client.get_balance("USDT")
        if balance is None:
            logging.warning("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!")
            continue

        # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞
        order_size = calculate_order_size(balance, strength)
        if order_size == 0:
            logging.warning(f"‚ö†Ô∏è {pair}: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–¥–µ–ª–∫–∏")
            continue

        # ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        side = "Buy" if signal == "BUY" else "Sell"
        response = await bybit_client.create_order(pair, side, order_size)

        if response:
            logging.info(f"‚úÖ {pair}: –û—Ä–¥–µ—Ä {side} –Ω–∞ {order_size} USDT —Ä–∞–∑–º–µ—â–µ–Ω!")
            active_orders[pair] = response.get("orderId")

            # ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–º –æ—Ä–¥–µ—Ä–µ
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"‚úÖ *{pair}*: –û—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä `{side}` –Ω–∞ *{order_size}* USDT",
                parse_mode="Markdown",
            )
        else:
            logging.error(f"‚ùå {pair}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")


def calculate_order_size(balance, strength):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º –æ—Ä–¥–µ—Ä–∞"""
    percent = 0.01 * strength  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - 1%, —Å–∏–ª—å–Ω—ã–π - 2%, –º–∞–∫—Å–∏–º—É–º - 5%
    order_size = balance * min(percent, 0.05)  # üî• –ù–µ –±–æ–ª—å—à–µ 5% –±–∞–ª–∞–Ω—Å–∞
    return round(order_size, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
