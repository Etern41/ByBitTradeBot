import json
import asyncio
import logging
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)

from autotrade import (
    start_auto_trade,
    stop_auto_trade,
    update_trade_pairs,
    auto_trade_active,
    active_orders
)
from bybit_client import BybitAPI
from indicators import IndicatorCalculator
from config import TELEGRAM_API_TOKEN, ADMIN_CHAT_ID, TRADE_PAIRS
from pair_manager import PairManager

pair_manager = PairManager()


# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

bot = Bot(token=TELEGRAM_API_TOKEN)
bybit_client = BybitAPI()
indicator_calc = IndicatorCalculator()


def load_trade_pairs():
    try:
        with open("config.json", "r") as file:
            config_data = json.load(file)
            return config_data.get("TRADE_PAIRS", [])  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—ã
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def main_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        [
            ["‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é", "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é"],
            ["üìä –ë–∞–ª–∞–Ω—Å", "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"],
            ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã", "üìâ –ü–æ–∑–∏—Ü–∏–∏"],
        ],
        resize_keyboard=True,
    )


async def positions(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /positions: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞"""
    if not active_orders:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
        return
    msg = "üìâ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n"
    for pair, info in active_orders.items():
        if info:
            msg += (
                f"‚Ä¢ {pair}: –û—Ä–¥–µ—Ä {info.get('order_id')}, "
                f"–°—Ç–æ—Ä–æ–Ω–∞: {info.get('side')}, –í—Ö–æ–¥: {info.get('entry_price'):.2f}, "
                f"–†–∞–∑–º–µ—Ä: {info.get('order_size')} USDT\n"
            )
    await update.message.reply_text(msg, parse_mode="Markdown")


async def send_startup_message(application: Application):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        await application.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ startup message: {e}")


async def start(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–π–¥-–±–æ—Ç –¥–ª—è Bybit.", reply_markup=main_menu()
    )


async def balance(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /balance: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        result = bybit_client.get_wallet_balance(as_report=True)
        if not result:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            return
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã Markdown –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–ª.
        result = result.replace("_", r"\_")
        await update.message.reply_text(result, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /balance: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def indicators(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /indicators: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç RSI, MACD, SMA –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
    try:
        updated_pairs = load_trade_pairs()
        result = indicator_calc.calculate_indicators(updated_pairs)
        if not result:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return
        await update.message.reply_text(result, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /indicators: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def update_pairs(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ '–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã'"""
    await update.message.reply_text("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
    await update_trade_pairs()
    await update.message.reply_text("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


async def button_handler(update: Update, context: CallbackContext) -> None:
    global auto_trade_active
    text = update.message.text

    if text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é":
        if auto_trade_active:
            await update.message.reply_text("‚ö†Ô∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        else:
            auto_trade_active = True
            asyncio.create_task(start_auto_trade())
    elif text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é":
        if not auto_trade_active:
            await update.message.reply_text("‚ö†Ô∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            auto_trade_active = False
            await update.message.reply_text("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    elif text == "üìä –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã":
        await indicators(update, context)
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã":
        await update_pairs(update, context)
        await update.message.reply_text(
            f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(TRADE_PAIRS)}",
            reply_markup=main_menu(),
        )
    elif text == "üìâ –ü–æ–∑–∏—Ü–∏–∏":
        await positions(update, context)


def main():
    app = ApplicationBuilder().token(TELEGRAM_API_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("indicators", indicators))
    app.add_handler(CommandHandler("update_pairs", update_pairs))
    app.add_handler(CommandHandler("positions", positions))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    loop = asyncio.get_event_loop()
    loop.create_task(send_startup_message(app))

    print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞—é polling...")
    app.run_polling()


if __name__ == "__main__":
    main()
