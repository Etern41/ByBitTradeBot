import logging
import time
from pybit.unified_trading import HTTP
from config import BYBIT_API_KEY, BYBIT_API_SECRET, USE_TESTNET, TRADE_INTERVAL


class BybitAPI:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è Unified API v5 —á–µ—Ä–µ–∑ pybit.unified_trading."""
        self.session = HTTP(
            testnet=USE_TESTNET,
            api_key=BYBIT_API_KEY,
            api_secret=BYBIT_API_SECRET,
        )

    def create_order(self, symbol, side, order_size, price=None, order_link_id=None):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ Bybit Spot —á–µ—Ä–µ–∑ Unified API v5 c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pybit."""
        params = {
            "category": "spot",
            "symbol": symbol,
            "side": side,
        }
        if price is None:
            params["orderType"] = "Market"
            if side == "Buy":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç order_size (USDT)
                kline = self.get_kline(symbol, interval=TRADE_INTERVAL, limit=1)
                if kline and "result" in kline and kline["result"]["list"]:
                    current_price = float(kline["result"]["list"][-1][4])
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–∞ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 8 –∑–Ω–∞–∫–æ–≤)
                    token_qty = round(order_size / current_price, 8)
                    params["qty"] = str(token_qty)
                else:
                    return None
            else:
                params["qty"] = str(order_size)
        else:
            params["orderType"] = "Limit"
            params["price"] = str(price)
            params["qty"] = str(order_size)
            params["timeInForce"] = "GTC"
            if order_link_id is not None:
                params["orderLinkId"] = order_link_id

        try:
            response = self.session.place_order(**params)
            logging.info(f"–û—Ç–≤–µ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {response}")
            return response
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None

    def get_usdt_balance(self):
        try:
            response = self.session.get_wallet_balance(accountType="UNIFIED")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
        coins = response["result"]["list"][0]["coin"]
        for coin in coins:
            if coin["coin"] == "USDT":
                return float(coin["walletBalance"])
        return 0.0

    def close_position(self, symbol, current_side, order_size):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ Bybit Spot.
        –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è Buy, –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ä–¥–µ—Ä–æ–º Sell, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
        """
        opposite_side = "Sell" if current_side == "Buy" else "Buy"
        return self.create_order(symbol, opposite_side, order_size)

    def get_open_orders(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–ø–æ—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ —á–µ—Ä–µ–∑ Unified API v5.
        –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ get_order_list —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä orderStatus.
        """
        try:
            response = self.session.get_order_list(category="spot", orderStatus="New")
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {response}")
            return response
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return None

    def get_wallet_balance(self, as_report=False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Unified Trading —á–µ—Ä–µ–∑ Unified API v5.
        –ï—Å–ª–∏ as_report=True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç,
        –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (USDT).
        """
        try:
            response = self.session.get_wallet_balance(accountType="UNIFIED")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

        coins = response["result"]["list"][0]["coin"]
        total_balance = sum(float(coin["usdValue"]) for coin in coins)

        if as_report:
            report = "üí∞ *–ë–∞–ª–∞–Ω—Å Bybit*\n"
            for coin in coins:
                report += f"{coin['coin']}: {coin['walletBalance']} USDT\n"
            report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            report += f"üí≥ *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* {total_balance:,.2f} USDT"
            return report
        else:
            return total_balance

    def get_kline(self, symbol, interval=TRADE_INTERVAL, limit=1000):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ Unified API v5.
        """
        try:
            response = self.session.get_kline(
                category="spot", symbol=symbol, interval=interval, limit=str(limit)
            )
            return response
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            return None

    def get_trading_pairs(self, min_volume=100000):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å Bybit Spot —á–µ—Ä–µ–∑ Unified API v5.
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä—ã —Å–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏.
        """
        try:
            response = self.session.get_tickers(category="spot")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            return []
        stablecoins = {"USDC", "BUSD", "DAI", "TUSD", "FDUSD", "EURS"}
        pairs = []
        for ticker in response["result"]["list"]:
            symbol = ticker["symbol"]
            volume = float(ticker["turnover24h"])
            if "USDT" in symbol and not any(stable in symbol for stable in stablecoins):
                if volume >= min_volume:
                    pairs.append(symbol)
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")
        return pairs

    def get_available_pairs(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ Bybit Spot —á–µ—Ä–µ–∑ Unified API v5.
        """
        try:
            response = self.session.get_instruments(category="spot")
            pairs = [item["symbol"] for item in response["result"]["list"]]
            return pairs
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä: {e}")
            return []

    def get_spot_pairs(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –Ω–∞ Bybit Spot —á–µ—Ä–µ–∑ Unified API v5 (—Ç–∏–∫–µ—Ä—ã).
        """
        try:
            response = self.session.get_tickers(category="spot")
            return response["result"]["list"]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            return []

    def get_asset_balance(self, asset):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC) –∏–∑ —Å—á–µ—Ç–∞ Unified Trading.
        """
        try:
            response = self.session.get_wallet_balance(accountType="UNIFIED")
            coins = response["result"]["list"][0]["coin"]
            for coin in coins:
                if coin["coin"] == asset:
                    return float(coin["walletBalance"])
            return 0.0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {asset}: {e}")
            return 0.0
