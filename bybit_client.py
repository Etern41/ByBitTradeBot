import requests
import time
import hmac
import hashlib
import json
import uuid
import logging
import pandas as pd
from config import BYBIT_API_KEY, BYBIT_API_SECRET, USE_TESTNET, TRADE_INTERVAL


class BybitAPI:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Bybit"""
        self.api_key = BYBIT_API_KEY
        self.secret_key = BYBIT_API_SECRET
        self.recv_window = "5000"
        self.base_url = (
            "https://api-testnet.bybit.com" if USE_TESTNET else "https://api.bybit.com"
        )
        self.http_client = requests.Session()

    def _generate_signature(self, payload: dict, timestamp: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC SHA256 –ø–æ–¥–ø–∏—Å—å –¥–ª—è Bybit API V5"""
        sorted_payload = "&".join(
            f"{key}={value}" for key, value in sorted(payload.items())
        )
        param_str = f"{timestamp}{self.api_key}{self.recv_window}{sorted_payload}"

        return hmac.new(
            self.secret_key.encode("utf-8"), param_str.encode("utf-8"), hashlib.sha256
        ).hexdigest()

    def _make_request(self, endpoint, method, payload, description):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        timestamp = str(int(time.time() * 1000))
        signature = self._generate_signature(payload, timestamp)

        headers = {
            "X-BAPI-API-KEY": self.api_key,
            "X-BAPI-SIGN": signature,
            "X-BAPI-SIGN-TYPE": "2",
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-RECV-WINDOW": self.recv_window,
            "Content-Type": "application/json",
            "Accept": "application/json",
        }

        url = self.base_url + endpoint
        response = self.http_client.request(
            method, url, headers=headers, params=payload
        )

        if response.status_code != 200:
            logging.error(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {description}: {response.status_code} | {response.text}"
            )
            return None

        return response.json()

    def get_wallet_balance(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å (Bybit API V5) –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        endpoint = "/v5/account/wallet-balance"
        payload = {"accountType": "UNIFIED"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")

        if not response or response.get("retCode") != 0:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        coins = response["result"]["list"][0]["coin"]
        total_balance = sum(float(coin["usdValue"]) for coin in coins)

        # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = "üí∞ *–ë–∞–ª–∞–Ω—Å Bybit*\n"
        for coin in coins:
            name = coin["coin"]
            amount = f"{float(coin['walletBalance']):,.4f}".rstrip("0").rstrip(".")
            usd_value = f"{float(coin.get('usdValue', 0)):.2f}"
            report += f"{name}: {amount} ({usd_value} USDT)\n"

        report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        report += f"üí≥ *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* {total_balance:,.2f} USDT"

        return report


    def get_trading_pairs(self, min_volume=100000):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏–∫–≤–∏–¥–Ω—ã—Ö USDT-–ø–∞—Ä —Å Bybit, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã (–∫—Ä–æ–º–µ USDT)"""
        endpoint = "/v5/market/tickers"
        payload = {"category": "spot"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä")

        if not response or response.get("retCode") != 0:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return []

        stablecoins = {"USDC", "BUSD", "DAI", "TUSD", "FDUSD", "EURS"}
        pairs = []

        for ticker in response["result"]["list"]:
            symbol = ticker["symbol"]
            volume = float(ticker["turnover24h"])

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ USDT –∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã —Å–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏
            if "USDT" in symbol and not any(stable in symbol for stable in stablecoins):
                if volume >= min_volume:
                    pairs.append(symbol)

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")
        return pairs

    def get_kline(self, symbol, interval=TRADE_INTERVAL, limit=1000):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π"""
        endpoint = "/v5/market/kline"
        payload = {
            "category": "spot",
            "symbol": symbol,
            "interval": str(interval),
            "limit": str(limit),
        }
        return self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

    def filter_pairs_by_volatility(self, pairs, min_atr=0.005):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–∞—Ä—ã –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)"""
        filtered_pairs = []
        for pair in pairs:
            kline_data = self.get_kline(pair)
            if not kline_data or "result" not in kline_data:
                continue

            df = pd.DataFrame(
                kline_data["result"]["list"],
                columns=["timestamp", "open", "high", "low", "close", "volume"],
            )
            df["close"] = df["close"].astype(float)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            atr = df["close"].rolling(50).std().mean()
            if atr > min_atr:
                filtered_pairs.append(pair)

        logging.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_pairs)} –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –ø–∞—Ä")
        return filtered_pairs

    def get_available_pairs(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ Bybit (SPOT)"""
        endpoint = "/v5/market/instruments-info"
        payload = {"category": "spot"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä")

        if not response or response.get("retCode") != 0:
            return []

        pairs = [item["symbol"] for item in response["result"]["list"]]
        return pairs

    def get_spot_pairs(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –Ω–∞ Bybit Spot"""
        endpoint = "/v5/market/tickers"
        payload = {"category": "spot"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä")

        if not response or response.get("retCode") != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return []

        return response["result"]["list"]
