import requests
import time
import hmac
import hashlib
import json
import uuid
import logging
import pandas as pd
from config import BYBIT_API_KEY, BYBIT_API_SECRET, USE_TESTNET, TRADE_INTERVAL


class BybitAPI:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Bybit"""
        self.api_key = BYBIT_API_KEY
        self.secret_key = BYBIT_API_SECRET
        self.recv_window = "5000"
        self.base_url = (
            "https://api-testnet.bybit.com" if USE_TESTNET else "https://api.bybit.com"
        )
        self.http_client = requests.Session()

    def _generate_signature(self, payload: dict, timestamp: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC SHA256 –ø–æ–¥–ø–∏—Å—å –¥–ª—è Bybit API V5.
        –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.
        """
        sorted_keys = sorted(payload.keys())
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –≤–∏–¥–µ "key1=value1&key2=value2..."
        query_string = "&".join(f"{key}={payload[key]}" for key in sorted_keys)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ query_string –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        signature = hmac.new(
            self.secret_key.encode("utf-8"), query_string.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        return signature

    def _make_request(self, endpoint, method, payload, description):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.
        –î–æ–±–∞–≤–ª—è–µ–º –≤ payload api_key, timestamp –∏ recv_window, –∑–∞—Ç–µ–º –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å.
        """
        timestamp = str(int(time.time() * 1000))
        if "api_key" not in payload:
            payload["api_key"] = self.api_key
        if "timestamp" not in payload:
            payload["timestamp"] = timestamp
        if "recv_window" not in payload:
            payload["recv_window"] = self.recv_window

        signature = self._generate_signature(payload, timestamp)
        payload["sign"] = signature

        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
        }

        url = self.base_url + endpoint
        if method.upper() == "GET":
            response = self.http_client.request(
                method, url, headers=headers, params=payload
            )
        else:
            response = self.http_client.request(
                method, url, headers=headers, data=json.dumps(payload)
            )

        if response.status_code != 200:
            logging.error(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {description}: {response.status_code} | {response.text}"
            )
            return None
        return response.json()

    def get_wallet_balance(self, as_report=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Unified Trading.
        –ï—Å–ª–∏ as_report=True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤.
        –ï—Å–ª–∏ as_report=False, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (USDT).
        """
        endpoint = "/v5/account/wallet-balance"
        payload = {"accountType": "UNIFIED"}
        payload["api_key"] = self.api_key
        payload["timestamp"] = str(int(time.time() * 1000))
        payload["recv_window"] = self.recv_window
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        if not response or response.get("retCode") != 0:
            return (
                None
                if not as_report
                else f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )

        unified_account = None
        for account in response["result"]["list"]:
            if account.get("accountType") == "UNIFIED":
                unified_account = account
                break
        if not unified_account:
            return None if not as_report else "‚ùå –û—à–∏–±–∫–∞: Unified Trading —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!"

        coins = unified_account["coin"]
        total_balance = sum(float(coin["usdValue"]) for coin in coins)

        if as_report:
            report = "üí∞ *–ë–∞–ª–∞–Ω—Å Bybit*\n"
            for coin in coins:
                name = coin["coin"]
                amount = f"{float(coin['walletBalance']):,.4f}".rstrip("0").rstrip(".")
                usd_value = f"{float(coin.get('usdValue', 0)):.2f}"
                report += f"{name}: {amount} ({usd_value} USDT)\n"
            report += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            report += f"üí≥ *–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:* {total_balance:,.2f} USDT"
            return report
        else:
            return total_balance

    def get_trading_pairs(self, min_volume=100000):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏–∫–≤–∏–¥–Ω—ã—Ö USDT-–ø–∞—Ä —Å Bybit, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã (–∫—Ä–æ–º–µ USDT)"""
        endpoint = "/v5/market/tickers"
        payload = {"category": "spot"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä")

        if not response or response.get("retCode") != 0:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return []

        stablecoins = {"USDC", "BUSD", "DAI", "TUSD", "FDUSD", "EURS"}
        pairs = []

        for ticker in response["result"]["list"]:
            symbol = ticker["symbol"]
            volume = float(ticker["turnover24h"])

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ USDT –∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã —Å–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏
            if "USDT" in symbol and not any(stable in symbol for stable in stablecoins):
                if volume >= min_volume:
                    pairs.append(symbol)

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä")
        return pairs

    def get_kline(self, symbol, interval=TRADE_INTERVAL, limit=1000):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π"""
        endpoint = "/v5/market/kline"
        payload = {
            "category": "spot",
            "symbol": symbol,
            "interval": str(interval),
            "limit": str(limit),
        }
        return self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

    def filter_pairs_by_volatility(self, pairs, min_atr=0.005):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–∞—Ä—ã –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)"""
        filtered_pairs = []
        for pair in pairs:
            kline_data = self.get_kline(pair)
            if not kline_data or "result" not in kline_data:
                continue

            df = pd.DataFrame(
                kline_data["result"]["list"],
                columns=["timestamp", "open", "high", "low", "close", "volume"],
            )
            df["close"] = df["close"].astype(float)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            atr = df["close"].rolling(50).std().mean()
            if atr > min_atr:
                filtered_pairs.append(pair)

        logging.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_pairs)} –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –ø–∞—Ä")
        return filtered_pairs

    def get_available_pairs(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ Bybit (SPOT)"""
        endpoint = "/v5/market/instruments-info"
        payload = {"category": "spot"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä")

        if not response or response.get("retCode") != 0:
            return []

        pairs = [item["symbol"] for item in response["result"]["list"]]
        return pairs

    def get_spot_pairs(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –Ω–∞ Bybit Spot"""
        endpoint = "/v5/market/tickers"
        payload = {"category": "spot"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä")

        if not response or response.get("retCode") != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return []

        return response["result"]["list"]


    def create_order(self, symbol, side, order_size, price=None, order_link_id=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ Bybit Spot —á–µ—Ä–µ–∑ Unified API v5.

        –ï—Å–ª–∏ price –Ω–µ —É–∫–∞–∑–∞–Ω (None), –æ—Ä–¥–µ—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä—ã–Ω–æ—á–Ω—ã–º:
        - –î–ª—è Buy: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä "quoteQty" (—Å—É–º–º–∞ –≤ USDT).
        - –î–ª—è Sell: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä "qty" (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞).

        –ï—Å–ª–∏ price —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ "price", "qty" –∏ "timeInForce" = "PostOnly".

        –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ unknown parameter –¥–æ–±–∞–≤–ª—è–µ–º:
        slTriggerBy = "LastPrice"
        slOrderType = "Market"
        """
        endpoint = "/v5/order/create"
        payload = {
            "category": "spot",
            "symbol": symbol,
            "side": side,
            "slTriggerBy": "LastPrice",
            "slOrderType": "Market",
            "isLeverage": 0,
            "orderFilter": "Order",
        }
        if price is None:
            payload["orderType"] = "Market"
            if side == "Buy":
                payload["quoteQty"] = str(order_size)
            else:
                payload["qty"] = str(order_size)
        else:
            payload["orderType"] = "Limit"
            payload["price"] = str(price)
            payload["qty"] = str(order_size)
            payload["timeInForce"] = "PostOnly"
            if order_link_id is not None:
                payload["orderLinkId"] = order_link_id

        response = self._make_request(endpoint, "POST", payload, "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
        logging.info(f"–û—Ç–≤–µ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {response}")
        return response

    def close_position(self, symbol, current_side, order_size):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Bybit Spot.
        –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è Buy, –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ä–¥–µ—Ä–æ–º Sell, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
        """
        opposite_side = "Sell" if current_side == "Buy" else "Buy"
        return self.create_order(symbol, opposite_side, order_size)

    def get_asset_balance(self, asset):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC) –∏–∑ —Å—á–µ—Ç–∞ Unified Trading"""
        endpoint = "/v5/account/wallet-balance"
        payload = {"accountType": "UNIFIED"}
        response = self._make_request(endpoint, "GET", payload, "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        if not response or response.get("retCode") != 0:
            return 0.0
        unified_account = None
        for account in response["result"]["list"]:
            if account.get("accountType") == "UNIFIED":
                unified_account = account
                break
        if not unified_account:
            return 0.0
        for coin in unified_account["coin"]:
            if coin["coin"] == asset:
                return float(coin["walletBalance"])
        return 0.0
