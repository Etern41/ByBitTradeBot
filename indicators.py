import pandas as pd
import ta
from bybit_client import BybitAPI
from config import TRADE_PAIRS


class IndicatorCalculator:
    def __init__(self):
        self.client = BybitAPI()

    def get_historical_data(self, symbol):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ OHLCV –¥–ª—è –ø–∞—Ä—ã"""
        try:
            response = self.client.get_kline(symbol)
            if (
                not response
                or "result" not in response
                or "list" not in response["result"]
            ):
                print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return None

            raw_data = response["result"]["list"]

            # üõ† –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (6 –∏–ª–∏ 7)
            columns = ["timestamp", "open", "high", "low", "close", "volume"]
            if len(raw_data[0]) == 7:
                columns.append("turnover")

            df = pd.DataFrame(raw_data, columns=columns)
            df["close"] = df["close"].astype(float)
            df["high"] = df["high"].astype(float)
            df["low"] = df["low"].astype(float)

            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    def calculate_indicators(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –≤ TRADE_PAIRS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        report = ""

        for pair in TRADE_PAIRS:
            df = self.get_historical_data(pair)
            if df is None:
                report += f"‚ùå {pair}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
                continue

            # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
            df["rsi"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()

            # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
            macd = ta.trend.MACD(df["close"])
            df["macd"] = macd.macd()
            df["macd_signal"] = macd.macd_signal()

            # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA (50 –∏ 200)
            df["sma_50"] = ta.trend.SMAIndicator(df["close"], window=50).sma_indicator()
            df["sma_200"] = ta.trend.SMAIndicator(
                df["close"], window=200
            ).sma_indicator()

            # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Bollinger Bands
            bb = ta.volatility.BollingerBands(df["close"], window=20, window_dev=2)
            df["bb_high"] = bb.bollinger_hband()
            df["bb_low"] = bb.bollinger_lband()

            # ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR (14)
            atr = ta.volatility.AverageTrueRange(
                df["high"], df["low"], df["close"], window=14
            )
            df["atr"] = atr.average_true_range()

            # ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            last_row = df.iloc[-1]

            # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal, strength = self.generate_trade_signal(last_row)

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç—á–µ—Ç
            report += (
                f"üìä *{pair}*\n"
                f"üîπ RSI: {last_row['rsi']:.2f} (–¶–µ–ª—å: 30 (–ü–æ–∫—É–ø–∫–∞) / 70 (–ü—Ä–æ–¥–∞–∂–∞))\n"
                f"üîπ MACD: {last_row['macd']:.2f} (Signal: {last_row['macd_signal']:.2f})\n"
                f"üîπ SMA 50/200: {last_row['sma_50']:.2f} / {last_row['sma_200']:.2f}\n"
                f"üîπ BB High/Low: {last_row['bb_high']:.2f} / {last_row['bb_low']:.2f}\n"
                f"üîπ ATR: {last_row['atr']:.2f} (–°—Ä–µ–¥–Ω–∏–π: {df['atr'].mean():.2f})\n"
                f"üì¢ –°–∏–≥–Ω–∞–ª: {signal}\n\n"
            )

        return report


    def generate_trade_signal(self, last_row):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI, MACD, SMA"""
        required_columns = ["rsi", "macd", "macd_signal", "sma"]

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        for col in required_columns:
            if col not in last_row:
                
                return "HOLD", 0  # ‚úÖ –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ç–æ—Ä–≥—É–µ–º

        signal = "HOLD"
        strength = 0

        # üî• –ü–æ–∫—É–ø–∫–∞ (–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: RSI < 30, —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: RSI < 20)
        if last_row["rsi"] < 30 and last_row["macd"] > last_row["macd_signal"]:
            signal = "BUY"
            strength = 1 if last_row["rsi"] > 20 else 2  # –ß–µ–º –Ω–∏–∂–µ RSI, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–∏–≥–Ω–∞–ª

        # üî• –ü—Ä–æ–¥–∞–∂–∞ (–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: RSI > 70, —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: RSI > 80)
        elif last_row["rsi"] > 70 and last_row["macd"] < last_row["macd_signal"]:
            signal = "SELL"
            strength = 1 if last_row["rsi"] < 80 else 2  # –ß–µ–º –≤—ã—à–µ RSI, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–∏–≥–Ω–∞–ª

        return signal, strength

    def calculate_signals(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        signals = {}

        for pair in TRADE_PAIRS:
            df = self.get_historical_data(pair)
            if df is None:
                signals[pair] = ("HOLD", 0)
                continue

            last_row = df.iloc[-1]
            signal, strength = self.generate_trade_signal(last_row)

            # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            signals[pair] = (signal, strength)

        return signals
