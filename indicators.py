import pandas as pd
import ta
from bybit_client import BybitAPI
from config import TRADE_PAIRS


class IndicatorCalculator:
    def __init__(self):
        self.client = BybitAPI()

    def get_historical_data(self, symbol):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ OHLCV –¥–ª—è –ø–∞—Ä—ã"""
        try:
            response = self.client.get_kline(symbol)
            if (
                not response
                or "result" not in response
                or "list" not in response["result"]
            ):
                print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return None

            raw_data = response["result"]["list"]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            columns = ["timestamp", "open", "high", "low", "close", "volume"]
            if len(raw_data[0]) == 7:
                columns.append("turnover")

            df = pd.DataFrame(raw_data, columns=columns)
            df["close"] = df["close"].astype(float)
            df["high"] = df["high"].astype(float)
            df["low"] = df["low"].astype(float)

            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    def calculate_indicators(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –≤ TRADE_PAIRS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        table = ""

        for pair in TRADE_PAIRS:
            df = self.get_historical_data(pair)
            if df is None:
                table += f"üìä {pair}\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
                continue

            # RSI –∏ –µ–≥–æ —Ü–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            rsi = ta.momentum.RSIIndicator(df["close"], window=14).rsi()
            rsi_last = rsi.iloc[-1]
            rsi_signal = "–¶–µ–ª—å: 30 (–ü–æ–∫—É–ø–∫–∞) / 70 (–ü—Ä–æ–¥–∞–∂–∞)"

            # MACD –∏ —Å–∏–≥–Ω–∞–ª
            macd = ta.trend.MACD(df["close"])
            macd_last = macd.macd().iloc[-1]
            macd_signal = macd.macd_signal().iloc[-1]

            # SMA 50 –∏ SMA 200
            sma_50 = ta.trend.SMAIndicator(df["close"], window=50).sma_indicator()
            sma_200 = ta.trend.SMAIndicator(df["close"], window=200).sma_indicator()
            sma_50_last = round(sma_50.iloc[-1], 2)
            sma_200_last = round(sma_200.iloc[-1], 2)

            # Bollinger Bands
            bb = ta.volatility.BollingerBands(df["close"], window=20, window_dev=2)
            bb_high = bb.bollinger_hband().iloc[-1]
            bb_low = bb.bollinger_lband().iloc[-1]
            bb_signal = f"{bb_low:.2f} / {bb_high:.2f}"

            # ATR (–°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            atr = ta.volatility.AverageTrueRange(
                df["high"], df["low"], df["close"], window=14
            ).average_true_range()
            atr_last = atr.iloc[-1]
            atr_avg = atr.mean()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            signal = self.generate_trade_signal(rsi_last, macd_last, macd_signal)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            table += (
                f"üìä {pair}\n"
                f"üîπ RSI: {rsi_last:.2f} ({rsi_signal})\n"
                f"üîπ MACD: {macd_last:.2f} (Signal: {macd_signal:.2f})\n"
                f"üîπ SMA 50/200: {sma_50_last} / {sma_200_last}\n"
                f"üîπ BB High/Low: {bb_signal}\n"
                f"üîπ ATR: {atr_last:.2f} (–°—Ä–µ–¥–Ω–∏–π: {atr_avg:.2f})\n"
                f"üì¢ –°–∏–≥–Ω–∞–ª: {signal}\n\n"
            )

        return table

    def generate_trade_signal(self, rsi, macd, macd_signal):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        signal = "‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (–°–∏–ª–∞: 0)"

        if rsi < 30 and macd > macd_signal:
            signal = "üü¢ –ü–æ–∫—É–ø–∫–∞ (–°–∏–ª—å–Ω—ã–π)" if rsi < 20 else "üü¢ –ü–æ–∫—É–ø–∫–∞ (–°–ª–∞–±—ã–π)"
        elif rsi > 70 and macd < macd_signal:
            signal = "üî¥ –ü—Ä–æ–¥–∞–∂–∞ (–°–∏–ª—å–Ω—ã–π)" if rsi > 80 else "üî¥ –ü—Ä–æ–¥–∞–∂–∞ (–°–ª–∞–±—ã–π)"

        return signal
