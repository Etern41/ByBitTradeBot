import pandas as pd
import ta
from bybit_client import BybitAPI
from config import TRADE_PAIRS, TRADE_INTERVAL


class IndicatorCalculator:
    def __init__(self):
        self.client = BybitAPI()

    def get_historical_data(self, symbol):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ OHLCV –¥–ª—è –ø–∞—Ä—ã"""
        try:
            response = self.client.get_kline(symbol, interval=TRADE_INTERVAL)
            if (
                not response
                or "result" not in response
                or "list" not in response["result"]
            ):
                print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return None

            raw_data = response["result"]["list"]
            columns = ["timestamp", "open", "high", "low", "close", "volume"]
            if len(raw_data[0]) == 7:
                columns.append("turnover")
            df = pd.DataFrame(raw_data, columns=columns)
            df["close"] = df["close"].astype(float)
            df["high"] = df["high"].astype(float)
            df["low"] = df["low"].astype(float)
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    def calculate_indicators(self, trade_pairs=None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å —ç–º–æ–¥–∂–∏"""
        if trade_pairs is None:
            trade_pairs = TRADE_PAIRS
        report = f"üìä *–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {TRADE_INTERVAL} –º–∏–Ω)*\n\n"
        for pair in trade_pairs:
            df = self.get_historical_data(pair)
            if df is None:
                report += f"‚ùå {pair}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
                continue

            df["rsi"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()
            macd = ta.trend.MACD(df["close"])
            df["macd"] = macd.macd()
            df["macd_signal"] = macd.macd_signal()
            df["sma_50"] = ta.trend.SMAIndicator(df["close"], window=50).sma_indicator()
            df["sma_200"] = ta.trend.SMAIndicator(
                df["close"], window=200
            ).sma_indicator()
            bb = ta.volatility.BollingerBands(df["close"], window=20, window_dev=2)
            df["bb_high"] = bb.bollinger_hband()
            df["bb_low"] = bb.bollinger_lband()
            atr = ta.volatility.AverageTrueRange(
                df["high"], df["low"], df["close"], window=14
            )
            df["atr"] = atr.average_true_range()
            last_row = df.iloc[-1]
            signal, strength = self.generate_trade_signal(last_row)
            composite = signal
            if strength >= 3:
                composite += " üí™"

            report += (
                f"üìä *{pair}* {get_signal_emoji(signal)}\n"
                f"{get_rsi_emoji(last_row['rsi'])} RSI: {last_row['rsi']:.2f} (–¶–µ–ª—å: 30/70)\n"
                f"{get_macd_emoji(last_row['macd'], last_row['macd_signal'])} MACD: {last_row['macd']:.2f} (Signal: {last_row['macd_signal']:.2f})\n"
                f"{get_sma_emoji(last_row['sma_50'], last_row['sma_200'], last_row['close'])} SMA 50/200: {last_row['sma_50']:.2f} / {last_row['sma_200']:.2f}\n"
                f"{get_bb_emoji(last_row['close'], last_row['bb_low'], last_row['bb_high'])} BB High/Low: {last_row['bb_high']:.2f} / {last_row['bb_low']:.2f}\n"
                f"{get_atr_emoji(last_row['atr'])} ATR: {last_row['atr']:.2f}\n"
                f"üì¢ –°–∏–≥–Ω–∞–ª: {composite} –°–∏–ª–∞: {strength}\n\n"
            )

        return report


    def generate_trade_signal(self, last_row):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–≤—è–∑–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
        –î–ª—è BUY —Ç—Ä–µ–±—É—é—Ç—Å—è:
        - RSI < 30
        - MACD > MACD_Signal
        - –¶–µ–Ω–∞ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2% –≤—ã—à–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Bollinger
        - ATR –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, < 10)
        - –¶–µ–Ω–∞ –≤—ã—à–µ SMA50
        –î–ª—è SELL ‚Äì –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ.
        –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã 3 —É—Å–ª–æ–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–∏–≥–Ω–∞–ª —Å —Å–∏–ª–æ–π —Ä–∞–≤–Ω–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
        """
        signal = "HOLD"
        strength = 0
        price = last_row["close"]

        # BUY —É—Å–ª–æ–≤–∏—è
        buy_conditions = 0
        if last_row["rsi"] < 30:
            buy_conditions += 1
        if last_row["macd"] > last_row["macd_signal"]:
            buy_conditions += 1
        # –î–æ–ø—É—Å—Ç–∏–º, —Ä–∞–∑—Ä–µ—à–∞–µ–º 2% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        if price <= last_row["bb_low"] * 1.02:
            buy_conditions += 1
        if last_row["atr"] < 10:  # –ø–æ—Ä–æ–≥ ATR (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏)
            buy_conditions += 1
        if price > last_row["sma_50"]:
            buy_conditions += 1

        # SELL —É—Å–ª–æ–≤–∏—è
        sell_conditions = 0
        if last_row["rsi"] > 70:
            sell_conditions += 1
        if last_row["macd"] < last_row["macd_signal"]:
            sell_conditions += 1
        if price >= last_row["bb_high"] * 0.98:
            sell_conditions += 1
        if last_row["atr"] < 10:
            sell_conditions += 1
        if price < last_row["sma_50"]:
            sell_conditions += 1

        if buy_conditions >= 3:
            signal = "BUY"
            strength = buy_conditions
        elif sell_conditions >= 3:
            signal = "SELL"
            strength = sell_conditions

        return signal, strength

    def calculate_signals(self, trade_pairs=None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        if trade_pairs is None:
            trade_pairs = TRADE_PAIRS
        signals = {}

        for pair in trade_pairs:
            df = self.get_historical_data(pair)
            if df is None or df.empty:
                signals[pair] = ("HOLD", 0)
                continue

            try:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                df["rsi"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()
                macd = ta.trend.MACD(df["close"])
                df["macd"] = macd.macd()
                df["macd_signal"] = macd.macd_signal()
                df["sma_50"] = ta.trend.SMAIndicator(
                    df["close"], window=50
                ).sma_indicator()
                df["sma_200"] = ta.trend.SMAIndicator(
                    df["close"], window=200
                ).sma_indicator()
                bb = ta.volatility.BollingerBands(df["close"], window=20, window_dev=2)
                df["bb_high"] = bb.bollinger_hband()
                df["bb_low"] = bb.bollinger_lband()
                atr = ta.volatility.AverageTrueRange(
                    df["high"], df["low"], df["close"], window=14
                )
                df["atr"] = atr.average_true_range()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {pair}: {e}")
                signals[pair] = ("HOLD", 0)
                continue

            last_row = df.iloc[-1]
            try:
                signal, strength = self.generate_trade_signal(last_row)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {pair}: {e}")
                signal, strength = ("HOLD", 0)

            signals[pair] = (signal, strength)
        return signals


def get_rsi_emoji(rsi):
    if rsi < 30:
        return "üü¢"
    elif rsi > 70:
        return "üî¥"
    else:
        return "üîµ"


def get_macd_emoji(macd, macd_signal):
    if macd > macd_signal:
        return "üü¢"
    elif macd < macd_signal:
        return "üî¥"
    else:
        return "üîµ"


def get_sma_emoji(sma50, sma200, price):
    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ SMA50 –∏ SMA50 –≤—ã—à–µ SMA200 ‚Äì –±—ã—á—å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∑–µ–ª—ë–Ω—ã–π)
    if price > sma50 and sma50 > sma200:
        return "üü¢"
    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ SMA50 –∏ SMA50 –Ω–∏–∂–µ SMA200 ‚Äì –º–µ–¥–≤–µ–∂—å–µ (–∫—Ä–∞—Å–Ω—ã–π)
    elif price < sma50 and sma50 < sma200:
        return "üî¥"
    else:
        return "üîµ"


def get_bb_emoji(price, bb_low, bb_high):
    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–∞ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ ‚Äì —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (–∑–µ–ª—ë–Ω—ã–π),
    # –µ—Å–ª–∏ –∫ –≤–µ—Ä—Ö–Ω–µ–π ‚Äì —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–∫—Ä–∞—Å–Ω—ã–π), –∏–Ω–∞—á–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
    if price <= bb_low:
        return "üü¢"
    elif price >= bb_high:
        return "üî¥"
    else:
        return "üîµ"


def get_atr_emoji(atr):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏; –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
    if atr < 1:
        return "üü¢"
    elif atr > 50:
        return "üî¥"
    else:
        return "üîµ"


def get_signal_emoji(signal):
    # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–º–æ–¥–∂–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
    if signal == "BUY":
        return "üü¢"
    elif signal == "SELL":
        return "üî¥"
    else:
        return "üîµ"
